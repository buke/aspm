// Generated by CoffeeScript 1.8.0
(function() {
  var aspm, cmd, e, exec, fail, pkg, program, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  exec = require('child_process').exec;

  program = require('commander');

  aspm = require('../lib');

  try {
    pkg = require('../package.json');
  } catch (_error) {
    e = _error;
  }

  fail = function(err) {
    console.error(err.message);
    console.error("not ok".red);
    process.exit(1);
  };

  program.version("v" + pkg.version).description('Install and build npm modules for Atom-Shell').option('-t, --target <version>', 'Atom-Shell version').option('-a, --arch <arch>', 'target architecture').option('-a, --target-platform <platform>', 'target platform').option('-s, --save', 'save as dependency to package.json').option('-s, --save-dev', 'save as devDependency to package.json').option('--tarball', '(fetch the url and) install from tarball.').option('--quiet', 'pshht.');

  program.command('install [module]').alias('i').description('install module (fetch & build)').action(function(module) {
    return aspm.installModule(module, program, function(err) {
      if (err) {
        fail(err);
      }
      return console.log("ok".green);
    });
  });

  program.command('fetch [module]').alias('f').description('fetch module').action(function(module) {
    return aspm.fetchModule(module, program, function(err) {
      if (err) {
        fail(err);
      }
      return console.log("ok".green);
    });
  });

  program.command('build <module>').alias('b').description('build module').action(function(module) {
    return aspm.buildModule(module, program, function(err) {
      if (err) {
        fail(err);
      }
      return console.log("ok".green);
    });
  });

  if (_ref = process.argv[2], __indexOf.call('dedupe shrinkwrap outdated version search publish'.split(' '), _ref) >= 0) {
    cmd = "npm " + (process.argv.slice(2).join(' '));
    aspm.runCmd(cmd, {}, false, function(err) {
      if (err) {
        fail(err);
      }
      return console.log("ok".green);
    });
  } else {
    program.parse(process.argv);
    if (program.args.length === 0) {
      program.help();
    }
  }

}).call(this);
